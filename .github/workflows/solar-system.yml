name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: â€˜mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: '${{ secrets.MONGO_PASSWORD  }}'
    
jobs:
  unit-testing:  
        name: Unit Testing
        runs-on: ubuntu-latest
        container:
          image: 'node:20'

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          
        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 20

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          continue-on-error: true
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

  code-coverage:  
        name: code-coverage
        runs-on: ubuntu-latest

        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4
          
          - name: Setup NodeJS Version
            uses: actions/setup-node@v3
            with:
              node-version: 18

          - name: Install Dependencies
            run: npm install
    
          - name: Code-Coverage
            continue-on-error: true
            run: npm run coverage

          - uses: actions/upload-artifact@v3
            with:
              name: Code-Coverage-Result
              path: coverage
              retention-days: 5 
  
  docker:  
    name: docker
    runs-on: ubuntu-latest
    needs: [unit-testing,code-coverage]
    permissions:
      packages: write
    steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
                
        - name: DockerHub Logins
          uses: docker/login-action@v2.2.0
          with:
            username:  ${{  vars.DOCKER_USERNAME }}
            password:  ${{ secrets.DOCKER_PASSWORD }} 


        - name: Docker Build and Push
          uses: docker/build-push-action@v4
          with:
              context: .
              push:  true
              tags:  ${{ vars.DOCKER_USERNAME }}/solar-system:${{  github.sha }}      

  dev-deploy:
    name: Deployment to K8s dev Namespace
    environment: 
        name: development
    needs: docker
    runs-on: ubuntu-latest
    steps:

        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Install kubectl cli
          uses: azure/setup-kubectl@v3
          with:
            version: 1.26.0
        
        - name: Adding kubeconfig
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}  
        
        # - name: Fetch K8s Cluster Details
        #   run: |
        #     kubectl version --short -o yaml
        
        # - name: Get Nginx Controller IP as Github Env Variable
        #   run: |
        #       echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath="{.status.loadbalancer.ingress[0].ip}")" >> $GITHUB_ENV    
            
        # - name:   Replace Token in Manifest files
        #   uses: cschleiden/replace-tokens@v1
        #   with:
        #       tokenPrefix: '_{_'  #D depends what you declare in your file as the Prefix and Suffix
        #       tokenSuffix: '_}_'
        #       files: '["kubernetes/development/*.yaml"]' # Location where the manifests are
        #   env:
        #     NAMESPACE: ${{ vars.NAMESPACE }}
        #     REPLICAS: ${{ vars.REPLICAS }}
        #     IMAGE: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
        #     INGRESS_IP:  ${{ env.INGRESS_IP }}          

        # - name: Checking Variables replacement
        #   run: | 
        #     cat kubernetes/development/*.yaml    

        # - name: Create MongoDB Secret
        #   run: |
        #      kubectl -n ${{ vars.NAMESPACE}} create secret generic mongo-db-creds \
        #       --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
        #       --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
        #       --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \    
        #       --save-config \
        #       --dry-run=client \
        #       -o yaml | kubectl apply -f -

        # - name: Deploy to dev env
        #   run: |
        #     kubectl apply -f kubernetes/development

        # - name: Set App Ingress Host URL
        #   id: set-ingress-host-address
        #   run: |
        #     echo "APP_INGRESS_HOST=$(kubectl -n${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")"  >> "$GITHUB_OUTPUT"                

              

  
        
